@page "/"
@inject IJSRuntime JSRuntime
@using System.Text.RegularExpressions;
@using Calendar.Scripts;
@namespace Index

<!--dialogs code-->
@code {
    #region event
    private void ToggleEventDialog()
    {
        if (isDayView)
        {
            eventCalendar = IndexClass.primaryCalendar;
            eventDate = Dates.DeparseDate(currentCalendarData.date, IndexClass.primaryCalendar);
        }
        JSRuntime.InvokeVoidAsync("ToggleDialog", "eventDialog");
    }
    private void OnEventCalendarChange(Dates.CalendarType newValue)
    {
        try
        {
            // Convert dates from old calendar to new calendar
            eventDate = Dates.DeparseDate(Dates.GregorianToDate(newValue, Dates.DateToGregorian(eventCalendar, Dates.ParseDate(eventDate, eventCalendar), true, true), true, true), newValue);
            eventRepeatUntil = Dates.DeparseDate(Dates.GregorianToDate(newValue, Dates.DateToGregorian(eventCalendar, Dates.ParseDate(eventRepeatUntil, eventCalendar), true, true), true, true), newValue);
        } catch {}
    }
    private bool AddEventFromUI()
    {
        try
        {
            if (!string.IsNullOrEmpty(advancedEventInput))
            {
                Events.AddEvent(Dates.DateToGregorian(eventCalendar, Dates.ParseDate(eventDate, eventCalendar), true, true), (string.IsNullOrEmpty(eventRepeatUntil) ? null : Dates.DateToGregorian(eventCalendar, Dates.ParseDate(eventRepeatUntil, eventCalendar), true, true)), eventCalendar, eventRepeatCalendar, advancedEventInput, eventTitle, eventBackgroundColor, eventTextColor, new());
            }
            else if (string.IsNullOrEmpty(eventRepeatUntil) && string.IsNullOrEmpty(eventRepeatEveryDays) && string.IsNullOrEmpty(eventRepeatEveryYears))
            {
                Events.AddEvent(Dates.DateToGregorian(eventCalendar, Dates.ParseDate(eventDate, eventCalendar), true, true), eventCalendar, eventTitle, eventBackgroundColor, eventTextColor, new());
            }
            else
            {
                Events.AddEvent(Dates.DateToGregorian(eventCalendar, Dates.ParseDate(eventDate, eventCalendar), true, true), (string.IsNullOrEmpty(eventRepeatUntil) ? null : Dates.DateToGregorian(eventCalendar, Dates.ParseDate(eventRepeatUntil, eventCalendar), true, true)), eventCalendar, eventRepeatCalendar, ((string.IsNullOrEmpty(eventRepeatEveryDays) ? "" : "&every-day-" + eventRepeatEveryDays) + (string.IsNullOrEmpty(eventRepeatEveryYears) ? "" : "&every-year-" + eventRepeatEveryYears))[1..], eventTitle, eventBackgroundColor, eventTextColor, new());
            }
            JSRuntime.InvokeVoidAsync("ToggleDialog", "eventDialog");
            eventDate = eventTitle = eventBackgroundColor = eventTextColor = eventRepeatUntil = eventRepeatEveryDays = eventRepeatEveryYears = advancedEventInput = "";
            isEditingEvent = false;

            return true;
        }
        catch { return false; }
    }
    [JSInvokable]
    public static void EditEventOpenUI(string ev)
    {
        var args = ev.Split(';');
        if (ev.Contains('|'))
        {
            Astronomy.JSRuntime.InvokeVoidAsync("console.log", "ra: " + ev);
            ev = args[8].Replace('|', ';');
            args = ev.Split(';');
            Astronomy.JSRuntime.InvokeVoidAsync("console.log", "rb: " + ev);
            eventRepeatCalendar = (Dates.CalendarTypeSetting)int.Parse(args[3]);
        }
        var calendar = (Dates.CalendarType)int.Parse(args[2]);
        (eventDate, eventRepeatUntil, eventCalendar, eventTitle, eventBackgroundColor, eventTextColor) = (Dates.DeparseDate(Dates.GregorianToDate(calendar, DateTime.Parse(args[0]), true, true), calendar), string.IsNullOrEmpty(args[1]) ? "" : Dates.DeparseDate(Dates.GregorianToDate(calendar, DateTime.Parse(args[1]), true, true), calendar), calendar, args[5], args[6], args[7]);
        if (args[4] != "")
        {
            eventRepeatCalendar = (Dates.CalendarTypeSetting)int.Parse(args[3]);
            foreach (var arg in args[4].Split('&'))
            {
                var split = arg.Split('-');
                if (split[0] == "every")
                {
                    if (split[1] == "day")
                    {
                        eventRepeatEveryDays = split[2];
                    }
                    else
                    {
                        eventRepeatEveryYears = split[2];
                    }
                }
                else
                {
                    advancedEventInput = args[4];
                    break;
                }
            }
        }
        else
        {
            eventRepeatUntil = "";
        }
        isEditingEvent = true;
        lastEditedEvent = ev;
    }
    private void EditEventFromUI()
    {
        if (AddEventFromUI())
        Events.RemoveEvent(lastEditedEvent);
    }
    private void DeleteEventFromUI()
    {
        JSRuntime.InvokeVoidAsync("ToggleDialog", "eventDialog");
        CloseEventUI();
        Events.RemoveEvent(lastEditedEvent);
    }
    private void CloseEventUIFromUI()
    {
        JSRuntime.InvokeVoidAsync("ToggleDialog", "eventDialog");
        CloseEventUI();
    }
    [JSInvokable]
    public static void CloseEventUI()
    {
        if (isEditingEvent)
        {
            eventDate = eventTitle = eventBackgroundColor = eventTextColor = eventRepeatUntil = eventRepeatEveryDays = eventRepeatEveryYears = advancedEventInput = "";
            isEditingEvent = false;
        }
    }
    static Dates.CalendarType eventCalendar = IndexClass.primaryCalendar;
    static Dates.CalendarTypeSetting eventRepeatCalendar = Dates.CalendarTypeSetting.anniversary;
    static string eventDate,
    eventTitle,
    eventBackgroundColor,
    eventTextColor,
    eventRepeatUntil,
    eventRepeatEveryDays,
    eventRepeatEveryYears,
    advancedEventInput;
    static bool isEditingEvent;
    static string lastEditedEvent;
    #endregion

    //goto
    static Dates.CalendarType gotoCalendar = IndexClass.primaryCalendar;
    static string gotoDate;
    private void GoToDateFromUI()
    {
        try
        {
            currentGregorianDate = Dates.DateToGregorian(gotoCalendar, Dates.ParseDate(gotoDate, gotoCalendar), true, false);
            JSRuntime.InvokeVoidAsync("ToggleDialog", "gotoDialog");
            if (gotoDate.Split('/').Length == 3) isDayView = true;
            RefreshCurrentCalendarData();
            gotoDate = "";
        } catch {}
    }

    //settings
    private void SaveSettingsFromUI()
    {
        JSRuntime.InvokeVoidAsync("ToggleDialog", "settingsDialog");
        SaveSettings(true);
    }
    private async void SetPositionToCurrent()
    {
        try
        {
            Location location = await Geolocation.Default.GetLocationAsync(new GeolocationRequest(GeolocationAccuracy.Medium, TimeSpan.FromSeconds(10)));

            if (location != null)
            {
                IndexClass.latitude = location.Latitude;
                IndexClass.longitude = location.Longitude;
            }
        }
        catch (PermissionException e)
        {
            #if WINDOWS
            await JSRuntime.InvokeVoidAsync("OnEsc");
            await JSRuntime.InvokeVoidAsync("ShowAdditionalDialog", "<p class=\"Piazzolla header1\">Location error</p>\n<p>On windows it's usually caused by location privacy system settings, on Windows 10: <b>Settings > Privacy > Location</b></p>");
            #endif
        }
        finally { }
    }
}


<dialog id="additionalDialog">
    <p class="closeDialogButton" onclick="javascript:ToggleDialog('additionalDialog')">🞬</p>
    <div id="additionalDialogContent" class="content">
        
    </div>
</dialog>

<dialog id="infoDialog">
    <p class="closeDialogButton" onclick="javascript:ToggleDialog('infoDialog')">🞬</p>
    <div class="content">
        <p class="Piazzolla header1">Credits</p>
        <p><span class="Piazzolla">Piazzolla font</span> by <a href="https://piazzolla.huertatipografica.com/">Juan Pablo del Peral (for Huerta Tipográfica)</a></p>
        <p>Formulas for calculating astronomical events by <a href="https://www.google.com/search?q=jean+meeus+books">Jean Meeus (Astronomical Algorithms - Second Edition)</a></p>
        <p>Icons by <a href="https://icons8.com">icons8.com</a></p>


        <p class="Piazzolla header1">Calendar info</p>

        <p class="Piazzolla header2" id="GregorianHeader">Gregorian</p>
        <p>The Gregorian calendar is the one you probably use everyday. The days last 24h (with leap seconds to adjustment to the solar cycle). It has 12 months with a set amount of days each, from 28 to 31. It is corrected to align with the solar year by leap years - adding one day to years which number is divisible by 4, unless it's also divisible by 100, unless it's also divisible by 400.</p>

        <p class="Piazzolla header2" id="AtticHeader">Attic</p>
        <p>The Attic calendar was used in ancient athens and nowhere else. The days start at sunrise. Each month starts the day after a new moon is observed, making them 29 to 30 days long. The year starts the first new moon after the June solstice, so it automatically aligns with the solar year, that also means that there can be 12 to 13 months in a year.</p>
    </div>
</dialog>

<dialog id="settingsDialog">
    <p class="closeDialogButton" @onclick="SaveSettingsFromUI">🞬</p>
    <div id="dialogNavigationParent">
        <p class="dialogNavigationElement Piazzolla" onclick="javascript:ScrollTo('Calendars')">Calendars</p>
        <p class="dialogNavigationElement Piazzolla" onclick="javascript:ScrollTo('Appearance')">Appearance</p>
        <p class="dialogNavigationElement Piazzolla" onclick="javascript:ScrollTo('Calculations')">Calculations</p>
        <p class="dialogNavigationElement Piazzolla" onclick="javascript:ScrollTo('DefaultEvents')">Default events</p>
        <p class="dialogNavigationElement Piazzolla" onclick="javascript:ScrollTo('AtticCalendar')">Attic calendar</p>
    </div>
    <div class="content" style="width: 76vw; margin-left: 17.5vw; margin-right: 2.5vw;">
        <p class="Piazzolla header1">Settings</p>

        <!--Calendars-->
        <p class="Piazzolla header2" id="CalendarsHeader">Calendars</p>

        <p class="inputLabel">Primary calendar</p>
        <select @bind="IndexClass.primaryCalendar">
            <option>Gregorian</option>
            <option>Attic</option>
        </select>
        <p class="inputLabel">Secondary calendar</p>
        <select @bind="IndexClass.secondaryCalendar">
            <option>Gregorian</option>
            <option>Attic</option>
        </select>
        <p class="inputLabel">Anniversary calendar</p>
        <input type="checkbox" @bind="IndexClass.anniversaryCalendar" />

        <!--Appearance-->
        <p class="Piazzolla header2" id="AppearanceHeader">Appearance</p>

        <p class="inputLabel">Light mode</p>
        <input type="checkbox" @bind="lightMode" />
        <br>
        <p class="inputLabel">Show secondary date in month view</p>
        <input type="checkbox" @bind="showSecondaryDateInMonthView" />
        <p class="inputLabel">Show secondary date in day view</p>
        <input type="checkbox" @bind="showSecondaryDateInDayView" />

        <!--Calculations-->
        <p class="Piazzolla header2" id="CalculationsHeader">Calculations</p>

        <p class="inputLabel">Latitude (°N)</p>
        <input type="number" @bind="IndexClass.latitude" />
        <p class="inputLabel">Longitude (°S)</p>
        <input type="number" @bind="IndexClass.longitude" />
        <input type="button" @onclick="SetPositionToCurrent" value="Get current position" />
        <br>
        <p class="inputLabel">Use low precision for sun transit</p>
        <input type="checkbox" @bind="IndexClass.useLowPrecisionForSunTransit" />
        <br>
        <p class="inputLabel">Automatically get sun position in day view</p>
        <input type="checkbox" @bind="automaticallyGetSunPositionInDayView" />

        <!--Events-->
        <p class="Piazzolla header2" id="DefaultEventsHeader">Default events</p>
        <p class="inputLabel">International holidays</p>
        <input type="checkbox" @bind="IndexClass.internationalSDE" />
        <br>
        <p class="inputLabel">Christian</p>
        <input type="checkbox" @bind="IndexClass.christianSDE" />
        <p class="inputLabel">Hellenic religious</p>
        <input type="checkbox" @bind="IndexClass.hellenicReligiousSDE" />
        <br>
        <p class="inputLabel">New moons</p>
        <input type="checkbox" @bind="IndexClass.newMoonsSDE" />
        <p class="inputLabel">Full moons</p>
        <input type="checkbox" @bind="IndexClass.fullMoonsSDE" />

        @if (IndexClass.primaryCalendar == Dates.CalendarType.Attic || IndexClass.secondaryCalendar == Dates.CalendarType.Attic)
        {
            <p class="Piazzolla header2" id="AtticCalendarHeader">Attic calendar</p>
            <p class="inputLabel">Intercalatory month (the one doubled in case of a 13-month year)</p>
            <input type="number" min="1" max="12" @bind="IndexClass.monthToDoubleInAttic" />
            <p class="inputLabel">Intercalatory month name formatting</p>
            <input spellcheck="false" type="text" @bind="IndexClass.doubledMonthNameFormattingInAttic" />
            <p class="inputLabel">Romanise month names</p>
            <input type="checkbox" @bind="IndexClass.romaniseMonthNamesInAttic" />
        }
    </div>
</dialog>

<dialog id="eventDialog">
    <p class="closeDialogButton" @onclick="CloseEventUIFromUI">🞬</p>
    <div class="content">
        <p class="Piazzolla header1">Add event</p>
        <p class="inputLabel">Calendar</p>
        <select value="@eventCalendar" @onchange="(changeEvent) => {var value = (Dates.CalendarType)Enum.Parse(typeof(Dates.CalendarType), changeEvent.Value.ToString()); OnEventCalendarChange(value); eventCalendar = value;}">
            <option>Gregorian</option>
            <option>Attic</option>
        </select>
        <p class="inputLabel">Date</p>
        <input type="text" @bind="eventDate" placeholder="@(eventCalendar switch {Dates.CalendarType.Gregorian => "21/2/1848 2:38", Dates.CalendarType.Attic => "16/8/O656Y3 1.3 night (Attic time of day ≠ Gregorian)"})" />
        <p class="inputLabel">Title</p>
        <input type="text" @bind="eventTitle" />
        <p class="inputLabel">Background color</p>
        <input type="text" @bind="eventBackgroundColor" placeholder="#f5a9b8" />
        <p class="inputLabel">Text color</p>
        <input type="text" @bind="eventTextColor" placeholder="white" />
        <p class="inputLabel">Repeat until</p>
        <input type="text" @bind="eventRepeatUntil" placeholder="@(eventCalendar switch {Dates.CalendarType.Gregorian => "21/2/1848 2:38 AM", Dates.CalendarType.Attic => "16/8/O656Y3 1:30 nyx"})" />
        <p class="inputLabel">Calendar for repeat rules</p>
        <select @bind="eventRepeatCalendar">
            <option>primary</option>
            <option>secondary</option>
            <option>anniversary</option>
            <option>Gregorian</option>
            <option>Attic</option>
        </select>
        <p class="inputLabel">Repeat every days</p>
        <input type="number" min="1" @bind="eventRepeatEveryDays" />
        <p class="inputLabel">Repeat every years</p>
        <input type="number" min="1" @bind="eventRepeatEveryYears" />
        <p class="inputLabel">Advanced repeat input</p>
        <input type="text" @bind="advancedEventInput" />
        <input type="button" @onclick="isEditingEvent ? EditEventFromUI : (() => {AddEventFromUI();})" value="Save" />
        @if (isEditingEvent)
        {
            <input type="button" @onclick="DeleteEventFromUI" value="Delete" />
        }
    </div>
</dialog>

<dialog id="gotoDialog">
    <p class="closeDialogButton" onclick="javascript:ToggleDialog('gotoDialog')">🞬</p>
    <div class="content">
        <p class="Piazzolla header1">Go to date</p>
        <p class="inputLabel">Calendar</p>
        <select @bind="gotoCalendar">
            <option>Gregorian</option>
            <option>Attic</option>
        </select>
        <p class="inputLabel">Date</p>
        <input type="text" @bind="gotoDate" placeholder="@(gotoCalendar switch {Dates.CalendarType.Gregorian => "21/2/1848 2:38", Dates.CalendarType.Attic => "16/8/O656Y3 1.3 night (Attic time of day ≠ Gregorian)"})" />
        <input type="button" @onclick="GoToDateFromUI" value="Go" />
    </div>
</dialog>


<div id="pageContent">
    @if (isDebug)
    {
        @code {
            string s = "";
        }
        <input type="text" placeholder="Enter date to see it's info" @oninput="(element => {if (DateTime.TryParse((string)element.Value, out var date)) s = Dates.GetDateInfo(Dates.CalendarType.Attic, date, true, true).ToString();})" />
        <p>The date you entered has following data in the attic calendar: @s</p>
        <br />
        <p>@currentGregorianDate</p>
        <p>Data of the currently open date: @currentCalendarData</p>
        <p>@IndexClass.envPath</p>
        <p>@Dates.DeparseDate(Dates.ParseDate("3/2/O700Y3 12", Dates.CalendarType.Attic), Dates.CalendarType.Attic)</p>
        <br />
        <p>12: @Dates.DateToGregorian(Dates.CalendarType.Attic, Dates.ParseDate("3/2/O700Y3 12", Dates.CalendarType.Attic), true, true)</p>
        <p>12.01: @Dates.DateToGregorian(Dates.CalendarType.Attic, Dates.ParseDate("3/2/O700Y3 12,01", Dates.CalendarType.Attic), true, true)</p>
        <p>12.02: @Dates.DateToGregorian(Dates.CalendarType.Attic, Dates.ParseDate("3/2/O700Y3 12,02", Dates.CalendarType.Attic), true, true)</p>
        <p>13: @Dates.DateToGregorian(Dates.CalendarType.Attic, Dates.ParseDate("3/2/O700Y3 13", Dates.CalendarType.Attic), true, true)</p>
        <p>14: @Dates.DateToGregorian(Dates.CalendarType.Attic, Dates.ParseDate("3/2/O700Y3 14", Dates.CalendarType.Attic), true, true)</p>
        <p>15: @Dates.DateToGregorian(Dates.CalendarType.Attic, Dates.ParseDate("3/2/O700Y3 15", Dates.CalendarType.Attic), true, true)</p>
        <p>16: @Dates.DateToGregorian(Dates.CalendarType.Attic, Dates.ParseDate("3/2/O700Y3 16", Dates.CalendarType.Attic), true, true)</p>
        <p>17: @Dates.DateToGregorian(Dates.CalendarType.Attic, Dates.ParseDate("3/2/O700Y3 17", Dates.CalendarType.Attic), true, true)</p>
        <p>18: @Dates.DateToGregorian(Dates.CalendarType.Attic, Dates.ParseDate("3/2/O700Y3 18", Dates.CalendarType.Attic), true, true)</p>
        <p>19: @Dates.DateToGregorian(Dates.CalendarType.Attic, Dates.ParseDate("3/2/O700Y3 19", Dates.CalendarType.Attic), true, true)</p>
        <p>20: @Dates.DateToGregorian(Dates.CalendarType.Attic, Dates.ParseDate("3/2/O700Y3 20", Dates.CalendarType.Attic), true, true)</p>
        <p>21: @Dates.DateToGregorian(Dates.CalendarType.Attic, Dates.ParseDate("3/2/O700Y3 21", Dates.CalendarType.Attic), true, true)</p>
        <p>22: @Dates.DateToGregorian(Dates.CalendarType.Attic, Dates.ParseDate("3/2/O700Y3 22", Dates.CalendarType.Attic), true, true)</p>
        <p>23: @Dates.DateToGregorian(Dates.CalendarType.Attic, Dates.ParseDate("3/2/O700Y3 23", Dates.CalendarType.Attic), true, true)</p>
        <p>24: @Dates.DateToGregorian(Dates.CalendarType.Attic, Dates.ParseDate("3/2/O700Y3 24", Dates.CalendarType.Attic), true, true)</p>
        <p>1: @Dates.DateToGregorian(Dates.CalendarType.Attic, Dates.ParseDate("4/2/O700Y3 1", Dates.CalendarType.Attic), true, true)</p>
        <p>Sun: @Astronomy.GetTimeOfSunTransitRiseSet(DateTime.Today)</p>
        <p>@Dates.GregorianToDate(Dates.CalendarType.Gregorian, new DateTime(2024, 5, 4, 8, 3, 4), true, false)</p>
        <br />
        @code {
            ValueTuple<int, int, double> date = Dates.ParseDate("3/2/O700Y3 12,01", Dates.CalendarType.Attic);
        }
        <p>@Dates.DateToGregorian(Dates.CalendarType.Attic, date, true, true)</p>
        <p>@Dates.DateToGregorian(Dates.CalendarType.Attic, date, true, false)</p>
        <p>@Dates.DateToGregorian(Dates.CalendarType.Attic, date, false, false)</p>
        <p>@Astronomy.GetTimeOfSunTransitRiseSet(new DateTime(2023, 8, 20))</p>
        <p>@Astronomy.GetTimeOfSunTransitRiseSet(new DateTime(2023, 8, 19))</p>
        <br />
    }


    <p style="width:100%; font-weight:100; text-align:center; line-height:1em; font-size:calc(.7 * var(--baseTextSize)); margin-top:.5vh" class="PiazzollaSC">@(isDayView ? Math.Floor(currentCalendarData.date.Item3) + "/" : "")@currentCalendarData.date.Item2/@currentCalendarData.yearName</p>
    <p style="position:absolute; width:33%; margin-right:33%; line-height:calc(2.7em + 1vh)" @onclick="() => ChangeDateBy1Unit(false)">◀</p>
    <p style="text-align:right; position:absolute; width:33%; margin-left:67%; line-height:calc(2.7em + 1vh)" @onclick="() => ChangeDateBy1Unit(true)">▶</p>
    <p style="width:100%; font-weight:100; line-height:1em; margin-bottom:1vh" class="PiazzollaSC header1" onclick="javascript:ToggleDialog('gotoDialog')">@(isDayView ? Math.Floor(currentCalendarData.date.Item3) + " " : "")@currentCalendarData.monthName</p>

    @GetCalendarHtml()

    <div style="display:flex; height:6.5vh; width:100%; padding:1px; justify-content:space-around">
        @if (lightModeConfirmed){
            @if (isDayView && System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform(System.Runtime.InteropServices.OSPlatform.Windows))
            {
                <img src="/css/Icons/icons8-return-light.png" @onclick="() => isDayView = false" />
            }
            <img src="/css/Icons/icons8-info-light.png" onclick="javascript:ToggleDialog('infoDialog')"/>
            <img src="/css/Icons/icons8-settings-light.png" onclick="javascript:ToggleDialog('settingsDialog')"/>
            <img src="/css/Icons/icons8-plus-light.png" @onclick="ToggleEventDialog"/>
        }
        else
        {
            @if (isDayView && System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform(System.Runtime.InteropServices.OSPlatform.Windows))
            {
                <img src="/css/Icons/icons8-return.png" @onclick="() => isDayView = false" />
            }
            <img src="/css/Icons/icons8-info.png" onclick="javascript:ToggleDialog('infoDialog')"/>
            <img src="/css/Icons/icons8-settings.png" onclick="javascript:ToggleDialog('settingsDialog')"/>
            <img src="/css/Icons/icons8-plus.png" @onclick="ToggleEventDialog" />
        }
    </div>
</div>

<style>
    #days {
        width: 100%;
        height: var(--availableHeight);
        padding: 0px;
        border: solid var(--anticontrastColor) 1px;
    }

    #days li {
        list-style-type: none;
        display: inline-block;
        width: calc(100% / @currentCalendarData.rowSize);
        height: calc(100% / @(Math.Max(Math.Ceiling((float)currentCalendarData.daysInMonth / currentCalendarData.rowSize), currentCalendarData.minRows)));
        font-size: 12px;
        border: solid var(--anticontrastColor) 1px;
        vertical-align: top;
        overflow: hidden;
    }

    .dayContent{
        height: 100%;
    }
    .today{
        border-radius: .6vh;
        background-color: var(--accentColor);
    }
    .dayP{
        width: fit-content;
        margin: auto;
        margin-bottom: 1.5%;
        padding-left: 1.5%;
        padding-right: 1.5%;
    }

    #days li.title{
        aspect-ratio: .1;
    }
</style>

@code {
    DotNetObjectReference<Index> _componentReference => DotNetObjectReference.Create(this);
#if DEBUG
    private bool isDebug = true;
#endif
#if !DEBUG
    private bool isDebug = false;
#endif


    private static bool isDayView = false;
    private static Dates.DateInfo currentCalendarData = new(default, default, 12, 30, 5, 1, "", "");
    private static DateTime currentGregorianDate = DateTime.Today;
    private static bool getSunPositionOnNextRefresh = false;

    // Settings
    private static bool lightMode = false;
    private static bool lightModeConfirmed = false; // Set to lightMode when settings are saved or loaded to prevent icons from changing modes before settings are closed
    private static bool showSecondaryDateInMonthView = true;
    private static bool showSecondaryDateInDayView = true;
    private static bool automaticallyGetSunPositionInDayView = false;
    public class IndexClass
    {
        public static string envPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "/Epigeos/Hydro/Reo";

        public static Dates.CalendarType primaryCalendar = Dates.CalendarType.Attic;
        public static Dates.CalendarType secondaryCalendar = Dates.CalendarType.Gregorian;

        public static bool anniversaryCalendar; // True - primary, false - secondary
        public static bool anniversaryCalendarConfirmed; // Set to lightMode when settings are saved or loaded to prevent icons from changing modes before settings are closed

        public static bool useLowPrecisionForSunTransit = true;

        public static double longitude = 37.976234;
        public static double latitude = 23.721661;


        // Attic
        public static int monthToDoubleInAttic = 6;
        public static string doubledMonthNameFormattingInAttic = "{originalName} II";
        public static bool romaniseMonthNamesInAttic = false;

        // Default events
        public static bool internationalSDE = true;
        public static bool christianSDE = false;
        public static bool hellenicReligiousSDE = true;
        public static bool newMoonsSDE = false;
        public static bool fullMoonsSDE = true;
        public static bool solsticesEqinoxesSDE = true;

        public static int presaveAstronomyEventsForGregorianMonths = 3 * 12; // This many months from today backwards and forwards
    }



    protected override void OnInitialized()
    {
#if ANDROID
    Calendar.MainActivity.instance.JSRuntime = JSRuntime;
#endif
        Astronomy.JSRuntime = JSRuntime;
        Dates.JSRuntime = JSRuntime;
        Events.JSRuntime = JSRuntime;

        System.Globalization.CultureInfo.CreateSpecificCulture("us");

        Directory.CreateDirectory(IndexClass.envPath);

        if (File.Exists(IndexClass.envPath + "/settings.data"))
        {
            LoadSettings();
        }
        else
        {
            SaveSettings(false);
        }

        RefreshCurrentCalendarData();

        if (!File.Exists(IndexClass.envPath + "/events.data")) File.WriteAllText(IndexClass.envPath + "/events.data", "21/2/1848;-international;0;2;every-year-1;Communist Manifesto publish anniversary;red;yellow");
        //if (!File.Exists(IndexClass.envPath + "/complexEvents.data")) File.WriteAllText(IndexClass.envPath + "/complexEvents.data", "");
        //if (!File.Exists(IndexClass.envPath + "/complexEvents.simplified.data")) File.WriteAllText(IndexClass.envPath + "/complexEvents.simplified.data", "");

        base.OnInitialized();
    }
    protected override async Task OnAfterRenderAsync(bool firstRenderer)
    {
        if (firstRenderer){
            await JSRuntime.InvokeVoidAsync("IndexRazor.SaveComponent", _componentReference);
            CheckForVersionAndPoll();
        }

        await base.OnAfterRenderAsync(firstRenderer);
    }
    [JSInvokable]
    public void SaveSettings(bool refreshCalendar)
    {
        File.WriteAllText(IndexClass.envPath + "/settings.data", lightMode + "\n" + (int)IndexClass.primaryCalendar + "\n" + (int)IndexClass.secondaryCalendar + "\n" + showSecondaryDateInMonthView + "\n" + showSecondaryDateInDayView + "\n" + IndexClass.monthToDoubleInAttic + "\n" + IndexClass.doubledMonthNameFormattingInAttic + "\n" + IndexClass.romaniseMonthNamesInAttic + "\n" + IndexClass.internationalSDE + "\n" + IndexClass.christianSDE + "\n" + IndexClass.hellenicReligiousSDE + "\n" + IndexClass.newMoonsSDE + "\n" + IndexClass.fullMoonsSDE);

        IndexClass.anniversaryCalendarConfirmed = IndexClass.anniversaryCalendar;
        LoadTheme();

        if (refreshCalendar) RefreshCurrentCalendarData();
    }
    private void LoadSettings()
    {
        try{
            var lines = File.ReadAllLines(IndexClass.envPath + "/settings.data");
            lightMode = bool.Parse(lines[0]);
            IndexClass.primaryCalendar = (Dates.CalendarType)int.Parse(lines[1]);
            IndexClass.secondaryCalendar = (Dates.CalendarType)int.Parse(lines[2]);
            showSecondaryDateInMonthView = bool.Parse(lines[3]);
            showSecondaryDateInDayView = bool.Parse(lines[4]);
            IndexClass.monthToDoubleInAttic = int.Parse(lines[5]);
            IndexClass.doubledMonthNameFormattingInAttic = lines[6];
            IndexClass.romaniseMonthNamesInAttic = bool.Parse(lines[8]);

            IndexClass.internationalSDE = bool.Parse(lines[9]);
            IndexClass.christianSDE = bool.Parse(lines[10]);
            IndexClass.hellenicReligiousSDE = bool.Parse(lines[11]);
            IndexClass.newMoonsSDE = bool.Parse(lines[12]);
            IndexClass.fullMoonsSDE = bool.Parse(lines[13]);

            IndexClass.anniversaryCalendarConfirmed = IndexClass.anniversaryCalendar;
            LoadTheme();
        }
        catch
        {
            SaveSettings(false);
        }
    }
    private void LoadTheme()
    {
        JSRuntime.InvokeVoidAsync("SetLightMode", lightMode);
        lightModeConfirmed = lightMode;

#if ANDROID
    if (lightMode){
    Calendar.MainActivity.instance.Window.SetStatusBarColor(Android.Graphics.Color.ParseColor("#eaedef"));
    Calendar.MainActivity.instance.Window.SetNavigationBarColor(Android.Graphics.Color.ParseColor("#eaedef"));
    }else{
    Calendar.MainActivity.instance.Window.SetStatusBarColor(Android.Graphics.Color.ParseColor("#151210"));
    Calendar.MainActivity.instance.Window.SetNavigationBarColor(Android.Graphics.Color.ParseColor("#151210"));
    }
#endif
    }


    private static void RefreshCurrentCalendarData()
    {
        currentCalendarData = Dates.GetDateInfo(IndexClass.primaryCalendar, currentGregorianDate, false, false);
    }
    private static MarkupString GetCalendarHtml()
    {
        var html = "";
        if (isDayView)
        {
            var eventsHtml = "";
            foreach (var ev in Events.GetEventsForDay(currentGregorianDate))
            {
                var evInfo = ev.Split(';');
                if (evInfo[1].StartsWith('-'))
                {
                    eventsHtml += $"<div class=\"taskDiv\" onclick=\"javascript:ToggleDialog('settingsDialog', 'DefaultEvents')\" style=\"background-color:{evInfo[6]}; color:{evInfo[7]}\">{evInfo[5]}</div>";
                }
                else
                {
                    eventsHtml += $"<div class=\"taskDiv\" onclick=\"javascript:EditEventOpenUI('{ev}')\" style=\"background-color:{evInfo[6]}; color:{evInfo[7]}\">{evInfo[5]}</div>";
                }
            }
            if (eventsHtml == "") eventsHtml = "<p>No events for this day</p>";

            var sunPositionHtml = "";
            if (automaticallyGetSunPositionInDayView || getSunPositionOnNextRefresh)
            {
                if (IndexClass.primaryCalendar == Dates.CalendarType.Gregorian || IndexClass.secondaryCalendar == Dates.CalendarType.Gregorian) // Calendars that don't have sunset as hour 0, since it would be pointless
                {
                    var sunTimes = Astronomy.GetTimeOfSunTransitRiseSet(currentGregorianDate);
                    if (IndexClass.primaryCalendar == Dates.CalendarType.Gregorian || IndexClass.secondaryCalendar == Dates.CalendarType.Gregorian)
                    {
                        sunPositionHtml += "<p class=\"Piazzolla\">Gregorian</p>" +
                        $"<p>Sun rise: {Dates.DeparseDate(Dates.GregorianToDate(Dates.CalendarType.Gregorian, sunTimes.Item3, true, true), Dates.CalendarType.Gregorian, true)}</p>" +
                        $"<p>Sun transit: {Dates.DeparseDate(Dates.GregorianToDate(Dates.CalendarType.Gregorian, sunTimes.Item1, true, true), Dates.CalendarType.Gregorian, true)}</p>" +
                        $"<p>Sun set: {Dates.DeparseDate(Dates.GregorianToDate(Dates.CalendarType.Gregorian, sunTimes.Item2, true, true), Dates.CalendarType.Gregorian, true)}</p>";
                    }
                }
            }
            else
            {
                sunPositionHtml += "<input type=\"button\" onclick=\"javascript:ShowSunPosition()\" value=\"Calculate\" />";
            }

            html += "<div id=\"days\" style=\"text-align:center; overflow:auto\">" +
            (showSecondaryDateInDayView ? "<p>" + Dates.DeparseDate(Dates.GregorianToDate(IndexClass.secondaryCalendar, currentGregorianDate, true, false), IndexClass.secondaryCalendar) + "</p>" : "") +
            "<p class=\"Piazzolla header2\">Events</p>" +
            eventsHtml +
            "<p class=\"Piazzolla header2\">Sun position</p>" +
            sunPositionHtml +
            "</div>";
        }
        else
        {
            html = "<ul id=\"days\">";

            var today = DateTime.Now;
            if (today < Astronomy.GetTimeOfSunTransitRiseSet(today, 0, false, true, false).Item2) today = today.AddDays(-1);
            today = today.Date;

            var firstOfTheMonthInSecondary = 0;
            var firstMonthLengthInSecondary = 0;
            if (showSecondaryDateInMonthView)
            {
                var secondaryInfo = Dates.GetDateInfo(IndexClass.secondaryCalendar, currentCalendarData.firstOfTheMonthInGregorian, true, false);
                firstOfTheMonthInSecondary = (int)secondaryInfo.date.Item3;
                firstMonthLengthInSecondary = secondaryInfo.daysInMonth;
            }
            for (int i = 1; i < currentCalendarData.daysInMonth + 1; i++)
            {
                var gregorianDate = currentCalendarData.firstOfTheMonthInGregorian.AddDays(i - 1);
                var eventsHtml = "";
                foreach (var ev in Events.GetEventsForDay(gregorianDate.Date))
                {
                    var evInfo = ev.Split(';');
                    eventsHtml += $"<div class=\"taskDiv\" style=\"background-color:{evInfo[6]}; color:{evInfo[7]}\">{evInfo[5]}</div>";
                }

                html += $"<li><div class=\"dayContent\" onclick=\"javascript:ToggleDay('{gregorianDate.Date}')\">" +
                $"<p class=\"dayP{(gregorianDate.Date == today ? " today" : "")}\">{i}{(showSecondaryDateInMonthView ? "(" + (((firstOfTheMonthInSecondary + i - 2) % firstMonthLengthInSecondary) + 1) + ")" : "")}</p>" +
                eventsHtml +
                "</div></li>";
            }

            var emptyBoxCount = Math.Max(currentCalendarData.minRows * currentCalendarData.rowSize - currentCalendarData.daysInMonth, 0);
            if ((currentCalendarData.daysInMonth + emptyBoxCount) % currentCalendarData.rowSize != 0)
            {
                emptyBoxCount += currentCalendarData.rowSize - (currentCalendarData.daysInMonth + emptyBoxCount) % currentCalendarData.rowSize;
            }
            for (int i = 0; i < emptyBoxCount; i++)
            {
                html += "<li><div class=\"dayContent\"></div></li>";
            }

            html += "</ul>";
        }

        getSunPositionOnNextRefresh = false;
        return (MarkupString)html;
    }

    [JSInvokable]
    public static void ChangeDateBy1Unit(bool forward)
    {
        if (isDayView)
        {
            if (IndexClass.primaryCalendar == Dates.CalendarType.Gregorian || IndexClass.primaryCalendar == Dates.CalendarType.Attic)
            {
                currentGregorianDate = currentGregorianDate.AddDays(forward ? 1 : -1);
                RefreshCurrentCalendarData();
            }
        }
        else
        {
            if (IndexClass.primaryCalendar == Dates.CalendarType.Gregorian)
            {
                currentGregorianDate = currentGregorianDate.AddMonths(forward ? 1 : -1);
                RefreshCurrentCalendarData();
            }
            else if (IndexClass.primaryCalendar == Dates.CalendarType.Attic)
            {
                var days = currentCalendarData.date.Item3;
                currentGregorianDate = currentCalendarData.firstOfTheMonthInGregorian;
                currentGregorianDate = currentGregorianDate.AddDays((forward ? 30 : -2));
                RefreshCurrentCalendarData();
                currentGregorianDate = currentCalendarData.firstOfTheMonthInGregorian.AddDays(days - 1);
                currentCalendarData.date.Item3 = days;
            }
        }
    }
    [JSInvokable]
    public static void ToggleDay(string date = default)
    {
        if (date != default) currentGregorianDate = DateTime.Parse(date);
        isDayView = !isDayView;
        RefreshCurrentCalendarData();
    }
    [JSInvokable]
    public static void ShowSunPosition()
    {
        getSunPositionOnNextRefresh = true;
    }
    [JSInvokable("StateHasChanged")]
    public void JSStateHasChanged()
    {
        StateHasChanged();
    }


    private static readonly string version = "1.0";
    private static string lastPoll;
    private async void CheckForVersionAndPoll()
    {
        try
        {
            var httpClient = new HttpClient();

            using HttpResponseMessage r1 = await httpClient.GetAsync(Constants.link + "/calendar-version.txt");
            r1.EnsureSuccessStatusCode();
            string latestVersion = await r1.Content.ReadAsStringAsync();
            if (latestVersion != version)
            {
                await JSRuntime.InvokeVoidAsync("ShowVersionDialog", version, latestVersion, System.Runtime.InteropServices.RuntimeInformation.RuntimeIdentifier);
            }
            else
            {
                using HttpResponseMessage r2 = await httpClient.GetAsync(Constants.link + "/calendar-poll.txt");
                r2.EnsureSuccessStatusCode();
                var poll = await r2.Content.ReadAsStringAsync();
                if ((!File.Exists(IndexClass.envPath + "/.p") || poll != File.ReadAllText(IndexClass.envPath + "/.p")) && poll != "")
                {
                    lastPoll = poll;
                    await JSRuntime.InvokeVoidAsync("ShowPollDialog", poll);
                }
            }
        }
        catch
        {

        }
    }
    [JSInvokable]
    public static async void SendPoll(string choice)
    {
        File.WriteAllText(IndexClass.envPath + "/.p", lastPoll);

        if (choice == "")
        {
            return;
        }
        var httpClient = new HttpClient();
        using HttpResponseMessage r = await httpClient.GetAsync(Constants.link + "/calendar-poll-db.php?a=" + choice);
        r.EnsureSuccessStatusCode();
        string result = await r.Content.ReadAsStringAsync();
        if (result == "0")
        {
            throw new("Failed to insert poll vote into db");
        }
    }
}